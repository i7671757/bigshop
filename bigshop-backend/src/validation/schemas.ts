import { z } from 'zod';

/**
 * =============================================================================
 * СХЕМЫ ВАЛИДАЦИИ ДЛЯ API ENDPOINTS
 * =============================================================================
 * Этот файл содержит все Zod схемы для валидации входящих данных в API.
 * Zod обеспечивает типобезопасность и автоматическую валидацию с понятными
 * сообщениями об ошибках на русском языке.
 */

// =============================================================================
// ПРОДУКТЫ (PRODUCTS) - схемы для работы с товарами в каталоге
// =============================================================================

/**
 * Схема для создания нового продукта в каталоге.
 * Валидирует все обязательные поля при добавлении товара администратором.
 * 
 * Основные проверки:
 * - name: обязательное название до 200 символов
 * - slug: URL-friendly идентификатор (только a-z, 0-9, -)
 * - price: положительная цена товара
 * - categoryId: связь с существующей категорией (UUID)
 * - inventory: количество на складе (не отрицательное)
 * - images: массив URL изображений товара
 * - dimensions: физические размеры для доставки
 */
export const createProductSchema = z.object({
  name: z.string().min(1, 'Название обязательно').max(200, 'Название слишком длинное'),
  slug: z.string().min(1, 'URL slug обязателен').max(200, 'Slug слишком длинный')
    .regex(/^[a-z0-9-]+$/, 'Slug может содержать только строчные буквы, цифры и дефисы'),
  description: z.string().optional(), // Полное описание товара
  shortDescription: z.string().optional(), // Краткое описание для карточек
  sku: z.string().max(100, 'SKU слишком длинный').optional(), // Артикул товара
  price: z.number().positive('Цена должна быть положительной'), // Основная цена
  comparePrice: z.number().positive('Цена для сравнения должна быть положительной').optional(), // Старая цена для акций
  categoryId: z.string().uuid('Неверный формат ID категории'), // Связь с категорией
  inventory: z.number().int().min(0, 'Количество не может быть отрицательным').default(0), // Остаток на складе
  weight: z.number().positive('Вес должен быть положительным').optional(), // Вес в кг для доставки
  dimensions: z.object({
    length: z.number().positive(), // Длина в см
    width: z.number().positive(),  // Ширина в см 
    height: z.number().positive()  // Высота в см
  }).optional(), // Размеры упаковки для расчета доставки
  images: z.array(z.string().url('Неверный формат URL изображения')).default([]), // Массив изображений товара
  tags: z.array(z.string()).default([]), // Теги для поиска и фильтрации
  metaTitle: z.string().max(200, 'Meta title слишком длинный').optional(), // SEO заголовок
  metaDescription: z.string().optional(), // SEO описание
  isFeatured: z.boolean().default(false) // Отметка "Рекомендуемый товар"
});

/**
 * Схема для обновления существующего продукта.
 * Все поля опциональны - обновляются только переданные значения.
 */
export const updateProductSchema = createProductSchema.partial();

/**
 * Схема для параметров поиска и фильтрации товаров.
 * Преобразует строковые query параметры из URL в нужные типы данных.
 * 
 * Особенности:
 * - Все параметры приходят как строки из query string
 * - transform() преобразует строки в числа/boolean
 * - pipe() применяет дополнительную валидацию после преобразования
 * - default() устанавливает значения по умолчанию
 */
export const productQuerySchema = z.object({
  category: z.string().optional(), // Фильтр по категории (ID категории)
  search: z.string().optional(), // Поиск по названию товара
  minPrice: z.string().transform(val => parseFloat(val)).pipe(z.number().positive()).optional(), // Минимальная цена
  maxPrice: z.string().transform(val => parseFloat(val)).pipe(z.number().positive()).optional(), // Максимальная цена
  featured: z.string().transform(val => val === 'true').pipe(z.boolean()).optional(), // Только рекомендуемые
  limit: z.string().default('20').transform(val => parseInt(val, 10)).pipe(z.number().int().min(1).max(100)), // Лимит на страницу
  offset: z.string().default('0').transform(val => parseInt(val, 10)).pipe(z.number().int().min(0)), // Смещение для пагинации
  sortBy: z.enum(['name', 'price', 'created', 'featured']).default('created'), // Поле сортировки
  sortOrder: z.enum(['asc', 'desc']).default('desc') // Направление сортировки
});

// =============================================================================
// КАТЕГОРИИ (CATEGORIES) - схемы для управления категориями товаров
// =============================================================================

/**
 * Схема для создания новой категории товаров.
 * Поддерживает иерархическую структуру с родительскими категориями.
 * 
 * Пример: "Продукты" -> "Фрукты" -> "Цитрусовые"
 */
export const createCategorySchema = z.object({
  name: z.string().min(1, 'Название обязательно').max(100, 'Название слишком длинное'), // Название категории
  slug: z.string().min(1, 'URL slug обязателен').max(100, 'Slug слишком длинный')
    .regex(/^[a-z0-9-]+$/, 'Slug может содержать только строчные буквы, цифры и дефисы'), // URL-путь категории
  description: z.string().optional(), // Описание категории для SEO
  parentId: z.string().uuid('Неверный формат ID родительской категории').optional(), // Для создания подкатегорий
  imageUrl: z.string().url('Неверный формат URL изображения').optional() // Изображение-обложка категории
});

/**
 * Схема для обновления категории.
 * Все поля опциональны для частичного обновления.
 */
export const updateCategorySchema = createCategorySchema.partial();

// =============================================================================
// КОРЗИНА (CART) - схемы для управления корзиной покупок
// =============================================================================

/**
 * Схема для добавления товара в корзину.
 * Проверяет корректность ID продукта и положительное количество.
 */
export const addToCartSchema = z.object({
  productId: z.string().uuid('Неверный формат ID продукта'), // ID товара для добавления
  quantity: z.number().int().min(1, 'Количество должно быть больше 0') // Количество единиц товара
});

/**
 * Схема для изменения количества товара в корзине.
 * Используется для кнопок +/- в интерфейсе корзины.
 */
export const updateCartItemSchema = z.object({
  quantity: z.number().int().min(1, 'Количество должно быть больше 0') // Новое количество товара
});

// =============================================================================
// ЗАКАЗЫ (ORDERS) - схемы для оформления и управления заказами
// =============================================================================

/**
 * Схема для создания нового заказа.
 * Включает все необходимые данные для оформления покупки:
 * - Список товаров с количеством и ценами
 * - Адрес доставки
 * - Дополнительные заметки
 */
export const createOrderSchema = z.object({
  items: z.array(z.object({
    productId: z.string().uuid('Неверный формат ID продукта'), // ID товара
    quantity: z.number().int().min(1, 'Количество должно быть больше 0'), // Количество
    unitPrice: z.number().positive('Цена должна быть положительной') // Цена за единицу на момент заказа
  })).min(1, 'Заказ должен содержать хотя бы один товар'), // Массив товаров в заказе
  shippingAddress: z.object({
    firstName: z.string().min(1, 'Имя обязательно'), // Имя получателя
    lastName: z.string().min(1, 'Фамилия обязательна'), // Фамилия получателя
    company: z.string().optional(), // Название компании (опционально)
    address1: z.string().min(1, 'Адрес обязателен'), // Основной адрес доставки
    address2: z.string().optional(), // Дополнительная информация об адресе
    city: z.string().min(1, 'Город обязателен'), // Город доставки
    province: z.string().optional(), // Регион/область
    postalCode: z.string().optional(), // Почтовый индекс
    country: z.string().min(1, 'Страна обязательна'), // Страна доставки
    phone: z.string().optional() // Контактный телефон
  }), // Полный адрес доставки
  notes: z.string().optional() // Дополнительные пожелания к заказу
});

/**
 * Схема для обновления статуса заказа администратором.
 * Используется в админ-панели для отслеживания выполнения заказов.
 */
export const updateOrderStatusSchema = z.object({
  status: z.enum(['pending', 'processing', 'shipped', 'delivered', 'cancelled', 'refunded'])
  // pending - новый заказ, ожидает обработки
  // processing - заказ в обработке, собирается на складе
  // shipped - заказ отправлен, в пути
  // delivered - заказ доставлен получателю
  // cancelled - заказ отменен
  // refunded - возврат средств выполнен
});

// =============================================================================
// АДРЕСА (ADDRESSES) - схемы для управления адресами пользователей
// =============================================================================

/**
 * Схема для создания нового адреса пользователя.
 * Пользователи могут сохранять несколько адресов для удобства оформления заказов.
 * Поддерживает отдельные адреса для доставки и выставления счетов.
 */
export const createAddressSchema = z.object({
  type: z.enum(['shipping', 'billing']).default('shipping'), // Тип адреса: доставка или счета
  firstName: z.string().min(1, 'Имя обязательно').max(100), // Имя получателя
  lastName: z.string().min(1, 'Фамилия обязательна').max(100), // Фамилия получателя
  company: z.string().max(100).optional(), // Название компании
  address1: z.string().min(1, 'Адрес обязателен').max(200), // Основной адрес
  address2: z.string().max(200).optional(), // Дополнительный адрес (квартира, офис)
  city: z.string().min(1, 'Город обязателен').max(100), // Город
  province: z.string().max(100).optional(), // Регион/область
  postalCode: z.string().max(20).optional(), // Почтовый индекс
  country: z.string().min(1, 'Страна обязательна').max(100), // Страна
  phone: z.string().max(20).optional(), // Контактный телефон
  isDefault: z.boolean().default(false) // Использовать как адрес по умолчанию
});

/**
 * Схема для обновления существующего адреса.
 * Все поля опциональны для частичного обновления.
 */
export const updateAddressSchema = createAddressSchema.partial();

// =============================================================================
// ВСПОМОГАТЕЛЬНЫЕ СХЕМЫ (HELPERS) - общие схемы валидации
// =============================================================================

/**
 * Схема для валидации UUID идентификаторов.
 * Используется для проверки корректности ID в URL параметрах.
 */
export const uuidSchema = z.string().uuid('Неверный формат UUID');

/**
 * Схема для параметров пагинации.
 * Используется в endpoints, которые возвращают списки данных.
 */
export const paginationSchema = z.object({
  limit: z.number().int().min(1).max(100).default(20), // Количество записей на страницу
  offset: z.number().int().min(0).default(0) // Количество записей для пропуска (смещение)
});