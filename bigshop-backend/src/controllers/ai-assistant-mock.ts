/**
 * =============================================================================
 * MOCK –ò–ò-–ê–°–°–ò–°–¢–ï–ù–¢ –î–õ–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
 * =============================================================================
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ OpenAI API –∫–ª—é—á–∞
 */

import { z } from 'zod';
import { db, products, cartItems } from '../db/index';
import { eq, and, ilike } from 'drizzle-orm';

const chatMessageSchema = z.object({
  message: z.string().min(1).max(1000),
  conversationId: z.string().optional(),
});

/**
 * Mock –≤–µ—Ä—Å–∏—è –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
export const chatWithAssistant = async ({ body, userId }: { body: any; userId: string }) => {
  try {
    const { message } = chatMessageSchema.parse(body);
    const lowerMessage = message.toLowerCase();
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    let response = '';
    let functionResults = [];
    
    // –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    if (lowerMessage.includes('–Ω–∞–π–¥–∏') || lowerMessage.includes('–ø–æ–∫–∞–∂–∏') || lowerMessage.includes('–ø–æ–∏—Å–∫')) {
      const searchResults = await mockSearchProducts(lowerMessage);
      functionResults.push({
        function: 'search_products',
        result: searchResults
      });
      
      if (searchResults.products.length > 0) {
        const productList = searchResults.products
          .map((p: any) => `‚Ä¢ ${p.name} - $${p.price}`)
          .join('\n');
        response = `üõí –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n${productList}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –∫–æ—Ä–∑–∏–Ω—É?`;
      } else {
        response = 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å!';
      }
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–∑–∏–Ω–µ
    else if (lowerMessage.includes('–∫–æ—Ä–∑–∏–Ω') || lowerMessage.includes('—á—Ç–æ —É –º–µ–Ω—è')) {
      const cartInfo = await mockGetCartInfo(userId);
      functionResults.push({
        function: 'get_cart_info',
        result: cartInfo
      });
      
      if (cartInfo.totalItems > 0) {
        const itemsList = cartInfo.items
          .map((item: any) => `‚Ä¢ ${item.name} x${item.quantity} - $${item.price}`)
          .join('\n');
        response = `üõí –í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n\n${itemsList}\n\n–ò—Ç–æ–≥–æ: ${cartInfo.totalItems} —Ç–æ–≤–∞—Ä(–æ–≤) –Ω–∞ $${cartInfo.totalAmount}`;
      } else {
        response = 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –•–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å?';
      }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    else if (lowerMessage.includes('–¥–æ–±–∞–≤—å') || lowerMessage.includes('—Ö–æ—á—É –∫—É–ø–∏—Ç—å')) {
      // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      const foundProduct = await findProductFromMessage(lowerMessage);
      
      if (foundProduct) {
        const addResult = await mockAddToCart(foundProduct.id, 1, userId);
        functionResults.push({
          function: 'add_to_cart',
          result: addResult
        });
        
        if (addResult.success) {
          response = `‚úÖ ${addResult.message} üõí`;
        } else {
          response = `‚ùå ${addResult.message}`;
        }
      } else {
        response = 'ü§î –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!';
      }
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    else if (lowerMessage.includes('–ø–æ—Å–æ–≤–µ—Ç—É–π') || lowerMessage.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É–π') || lowerMessage.includes('–∑–∞–≤—Ç—Ä–∞–∫')) {
      const recommendations = await mockGetRecommendations(lowerMessage);
      functionResults.push({
        function: 'search_products',
        result: recommendations
      });
      
      const productList = recommendations.products
        .map((p: any) => `‚Ä¢ ${p.name} - $${p.price} (${p.shortDescription})`)
        .join('\n');
      response = `‚ú® –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–ª—è –≤–∞—Å:\n\n${productList}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –∫–æ—Ä–∑–∏–Ω—É?`;
    }
    
    // –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    else {
      response = `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∫—É–ø–∫–∞–º –≤ BigShop. 

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:
üîç –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
üõí –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É  
üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã
üí° –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å: "–ù–∞–π–¥–∏ –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã" –∏–ª–∏ "–ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫?"`;
    }
    
    return {
      message: response,
      functionResults,
      timestamp: new Date().toISOString(),
      model: 'mock-assistant',
      usage: { total_tokens: 100 }, // Mock usage
    };
    
  } catch (error) {
    console.error('Mock AI assistant error:', error);
    throw new Error('Failed to process AI request');
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ mock —Ñ—É–Ω–∫—Ü–∏–∏
async function mockSearchProducts(query: string) {
  const conditions = [eq(products.isActive, true)];
  
  if (query.includes('–º–æ–ª–æ—á')) {
    // –ò—â–µ–º –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    conditions.push(ilike(products.name, '%–º–æ–ª–æ–∫–æ%'));
  } else if (query.includes('—Ñ—Ä—É–∫—Ç') || query.includes('—è–±–ª–æ–∫') || query.includes('–±–∞–Ω–∞–Ω')) {
    conditions.push(ilike(products.name, '%—è–±–ª–æ–∫%'));
  } else if (query.includes('—Ö–ª–µ–±')) {
    conditions.push(ilike(products.name, '%—Ö–ª–µ–±%'));
  }
  
  const foundProducts = await db
    .select({
      id: products.id,
      name: products.name,
      shortDescription: products.shortDescription,
      price: products.price,
      inventory: products.inventory,
    })
    .from(products)
    .where(and(...conditions))
    .limit(5);
    
  return {
    products: foundProducts,
    count: foundProducts.length
  };
}

async function mockGetCartInfo(userId: string) {
  const items = await db
    .select({
      id: cartItems.id,
      quantity: cartItems.quantity,
      product: {
        name: products.name,
        price: products.price,
      }
    })
    .from(cartItems)
    .leftJoin(products, eq(cartItems.productId, products.id))
    .where(eq(cartItems.userId, userId));
    
  const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);
  const totalAmount = items.reduce((sum, item) => {
    if (item.product) {
      return sum + (parseFloat(item.product.price) * item.quantity);
    }
    return sum;
  }, 0);
  
  return {
    items: items.map(item => ({
      name: item.product?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
      quantity: item.quantity,
      price: item.product?.price || '0'
    })),
    totalItems,
    totalAmount: totalAmount.toFixed(2)
  };
}

async function findProductFromMessage(message: string) {
  // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  if (message.includes('—è–±–ª–æ–∫')) {
    const product = await db.select().from(products).where(ilike(products.name, '%—è–±–ª–æ–∫%')).limit(1);
    return product[0] || null;
  }
  if (message.includes('–±–∞–Ω–∞–Ω')) {
    const product = await db.select().from(products).where(ilike(products.name, '%–±–∞–Ω–∞–Ω%')).limit(1);
    return product[0] || null;
  }
  if (message.includes('–º–æ–ª–æ–∫–æ')) {
    const product = await db.select().from(products).where(ilike(products.name, '%–º–æ–ª–æ–∫–æ%')).limit(1);
    return product[0] || null;
  }
  
  return null;
}

async function mockAddToCart(productId: string, quantity: number, userId: string) {
  try {
    const product = await db
      .select()
      .from(products)
      .where(eq(products.id, productId))
      .limit(1);
      
    if (!product || product.length === 0) {
      return { success: false, message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    const [productData] = product;
    
    const existingItem = await db
      .select()
      .from(cartItems)
      .where(and(eq(cartItems.userId, userId), eq(cartItems.productId, productId)))
      .limit(1);
      
    if (existingItem && existingItem.length > 0) {
      await db
        .update(cartItems)
        .set({ 
          quantity: existingItem[0].quantity + quantity,
          updatedAt: new Date() 
        })
        .where(eq(cartItems.id, existingItem[0].id));
        
      return { 
        success: true, 
        message: `"${productData.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É` 
      };
    } else {
      await db
        .insert(cartItems)
        .values({
          userId,
          productId,
          quantity,
          createdAt: new Date(),
          updatedAt: new Date(),
        });
        
      return { 
        success: true, 
        message: `"${productData.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É` 
      };
    }
  } catch (error) {
    return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏' };
  }
}

async function mockGetRecommendations(query: string) {
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫
  if (query.includes('–∑–∞–≤—Ç—Ä–∞–∫')) {
    const breakfast = await db
      .select({
        id: products.id,
        name: products.name,
        shortDescription: products.shortDescription,
        price: products.price,
        inventory: products.inventory,
      })
      .from(products)
      .where(and(
        eq(products.isActive, true),
        ilike(products.name, '%—Ö–ª–µ–±%')
      ))
      .limit(3);
      
    return { products: breakfast, count: breakfast.length };
  }
  
  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const featured = await db
    .select({
      id: products.id,
      name: products.name,
      shortDescription: products.shortDescription,
      price: products.price,
      inventory: products.inventory,
    })
    .from(products)
    .where(and(eq(products.isActive, true), eq(products.isFeatured, true)))
    .limit(3);
    
  return { products: featured, count: featured.length };
}