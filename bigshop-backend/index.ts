import { Elysia } from 'elysia';
import { cors } from '@elysiajs/cors';
import { swagger } from '@elysiajs/swagger';
import { db, products } from './src/db/index';
// ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
import { getProducts, getProductById } from './src/controllers/products';
import { getCart, addToCart, updateCartItem, removeFromCart, clearCart } from './src/controllers/cart';
// ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
import { chatWithAssistant } from './src/controllers/ai-assistant';
// import { chatWithAssistant } from './src/controllers/ai-assistant-mock';

// import { getProducts, getProductById } from './src/controllers/products-mock';

const app = new Elysia()
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  .derive(async ({ set }) => {
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏ —Å –ë–î
      await db.select().from(products).limit(1);
      return {}; // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    } catch (error) {
      console.error('Database connection failed:', error);
      set.status = 503;
      throw new Error('Database connection failed');
    }
  })
  .use(cors({
    origin: true,
    credentials: true,
  }))
  .use(swagger({
    documentation: {
      info: {
        title: 'BigShop API',
        version: '1.0.0',
        description: 'API –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è'
      },
      tags: [
        { name: 'products', description: '–ü—Ä–æ–¥—É–∫—Ç—ã' },
        { name: 'categories', description: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' },
        { name: 'cart', description: '–ö–æ—Ä–∑–∏–Ω–∞' },
        { name: 'orders', description: '–ó–∞–∫–∞–∑—ã' },
        { name: 'users', description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' }
      ]
    }
  }))
  .onError(({ code, error, set }) => {
    console.error('API Error:', error);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    switch (code) {
      case 'VALIDATION':
        set.status = 400;
        return {
          error: 'Validation Error',
          message: 'Invalid request parameters',
          details: error.message
        };

      case 'NOT_FOUND':
        set.status = 404;
        return {
          error: 'Not Found',
          message: 'Resource not found'
        };

      case 'INTERNAL_SERVER_ERROR':
      default:
        set.status = 500;
        return {
          error: 'Internal Server Error',
          message: process.env.NODE_ENV === 'development'
            ? (error as Error).message
            : 'Something went wrong'
        };
    }
  })
  .get('/health', () => ({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    database: 'connected' 
  }))

  .group('/api/v1', (app) =>
    app
      // Products endpoints —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      .get('/products', async ({ query, set }) => {
        try {
          return await getProducts({ query });
        } catch (error) {
          console.error('Products endpoint error:', error);
          throw error; // –ü—É—Å—Ç—å onError –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
        }
      }, {
        detail: {
          tags: ['products'],
          summary: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
          description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π'
        }
      })
      .get('/products/:id', async ({ params, set }) => {
        try {
          return await getProductById({ params });
        } catch (error) {
          console.error('Product by ID endpoint error:', error);
          throw error; // –ü—É—Å—Ç—å onError –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
        }
      }, {
        detail: {
          tags: ['products'],
          summary: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID',
          description: '–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π'
        }
      })
      .post('/products', () => ({ message: 'Create product endpoint - coming soon' }))
      
      // Categories endpoints  
      .get('/categories', () => ({ message: 'Categories endpoint - coming soon' }))
      
      // Cart endpoints
      .get('/cart/:userId', async ({ params, set }) => {
        try {
          return await getCart({ userId: params.userId });
        } catch (error) {
          console.error('Cart get endpoint error:', error);
          throw error;
        }
      }, {
        detail: {
          tags: ['cart'],
          summary: '–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã',
          description: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—á–µ—Ç–æ–º –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏'
        }
      })
      .post('/cart/:userId', async ({ params, body, set }) => {
        try {
          return await addToCart({ body, userId: params.userId });
        } catch (error) {
          console.error('Cart add endpoint error:', error);
          throw error;
        }
      }, {
        detail: {
          tags: ['cart'],
          summary: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É',
          description: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ'
        }
      })
      .put('/cart/:userId/items/:itemId', async ({ params, body, set }) => {
        try {
          return await updateCartItem({ 
            params: { itemId: params.itemId }, 
            body, 
            userId: params.userId 
          });
        } catch (error) {
          console.error('Cart update endpoint error:', error);
          throw error;
        }
      }, {
        detail: {
          tags: ['cart'],
          summary: '–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ',
          description: '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ quantity = 0'
        }
      })
      .delete('/cart/:userId/items/:itemId', async ({ params, set }) => {
        try {
          return await removeFromCart({ 
            params: { itemId: params.itemId }, 
            userId: params.userId 
          });
        } catch (error) {
          console.error('Cart remove endpoint error:', error);
          throw error;
        }
      }, {
        detail: {
          tags: ['cart'],
          summary: '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
          description: '–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        }
      })
      .delete('/cart/:userId', async ({ params, set }) => {
        try {
          return await clearCart({ userId: params.userId });
        } catch (error) {
          console.error('Cart clear endpoint error:', error);
          throw error;
        }
      }, {
        detail: {
          tags: ['cart'],
          summary: '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
          description: '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        }
      })
      
      // Orders endpoints
      .get('/orders', () => ({ message: 'Orders endpoint - coming soon' }))
      .post('/orders', () => ({ message: 'Create order endpoint - coming soon' }))
      
      // AI Assistant endpoints
      .post('/ai/chat/:userId', async ({ params, body, set }) => {
        try {
          return await chatWithAssistant({ body, userId: params.userId });
        } catch (error) {
          console.error('AI chat endpoint error:', error);
          throw error;
        }
      }, {
        detail: {
          tags: ['ai'],
          summary: '–ß–∞—Ç —Å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º',
          description: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏'
        }
      })
  )
  .listen(process.env.PORT || 3001);

console.log(`üöÄ BigShop API running at http://${app.server?.hostname}:${app.server?.port}`);
console.log(`üìö Swagger documentation: http://${app.server?.hostname}:${app.server?.port}/swagger`);