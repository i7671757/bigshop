/**
 * =============================================================================
 * MIDDLEWARE ДЛЯ АУТЕНТИФИКАЦИИ И ЗАЩИТЫ МАРШРУТОВ
 * =============================================================================
 * Этот файл настраивает Clerk middleware для защиты приватных страниц
 * и автоматического редиректа неавторизованных пользователей.
 * 
 * Выполняется на каждом запросе перед рендерингом страниц.
 */

import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';

/**
 * Определение защищенных маршрутов, которые требуют авторизации.
 * 
 * Паттерны маршрутов:
 * - /dashboard(.*)  - админ панель и аналитика
 * - /profile(.*)    - профиль пользователя, история заказов
 * - /admin(.*)      - администрирование товаров и заказов
 * - /checkout(.*)   - оформление заказа и платежи
 * - /orders(.*)     - просмотр заказов и статусы доставки
 * 
 * Все остальные маршруты (/products, /, /categories) остаются публичными.
 */
const isProtectedRoute = createRouteMatcher([
  '/dashboard(.*)', // Админ дашборд и аналитика
  '/profile(.*)',   // Личный кабинет пользователя
  '/admin(.*)',     // Админ функции (управление товарами, заказами)
  '/checkout(.*)',  // Оформление заказа (требует авторизации)
  '/orders(.*)',    // История и детали заказов
]);

/**
 * Основной middleware функция для обработки авторизации.
 * 
 * Логика работы:
 * 1. Проверяет, является ли маршрут защищенным
 * 2. Если да - перенаправляет на /sign-in при отсутствии авторизации
 * 3. Если нет - пропускает запрос дальше без проверок
 * 
 * @param auth - объект аутентификации от Clerk
 * @param req - объект HTTP запроса
 */
export default clerkMiddleware(async (auth, req) => {
  // Защищаем маршруты, требующие аутентификации
  if (isProtectedRoute(req)) {
    await auth.protect(); // Автоматический редирект на /sign-in если не авторизован
  }
  // Для публичных маршрутов middleware не вмешивается
});

/**
 * Конфигурация того, к каким запросам применять middleware.
 * 
 * Matcher правила:
 * - Исключаем статические файлы (_next, images, css, js, etc.)
 * - Включаем все страницы приложения
 * - Включаем API routes для защиты backend endpoints
 * 
 * Это оптимизирует производительность, избегая обработки статических ресурсов.
 */
export const config = {
  matcher: [
    // Применяем ко всем маршрутам, кроме статических файлов и системных
    '/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
    
    // Включаем API routes для возможной защиты в будущем
    '/(api|trpc)(.*)',
  ],
};