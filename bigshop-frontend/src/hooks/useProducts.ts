/**
 * =============================================================================
 * REACT HOOKS ДЛЯ РАБОТЫ С ПРОДУКТАМИ
 * =============================================================================
 * Этот файл содержит React хуки, использующие TanStack Query для управления
 * состоянием загрузки, кеширования и синхронизации данных о продуктах.
 */

import { useQuery } from '@tanstack/react-query';
import { apiClient } from '@/api/client';
import { ProductQueryParams } from '@/types';

/**
 * Хук для получения списка продуктов с автоматическим кешированием.
 * 
 * Функционал:
 * - Автоматическое кеширование результатов
 * - Реактивность на изменение параметров
 * - Автоматическая повторная загрузка при ошибках
 * - Фоновая синхронизация данных
 * - Loading/error состояния из коробки
 * 
 * Query Key: ['products', params] - уникальный ключ кеша
 * 
 * @param params - параметры фильтрации продуктов (опциональные)
 * @returns объект с data, isLoading, error и другими состояниями запроса
 * 
 * @example
 * const { data, isLoading, error } = useProducts({ 
 *   category: 'fruits', 
 *   limit: 20 
 * });
 */
export const useProducts = (params?: ProductQueryParams) => {
  return useQuery({
    queryKey: ['products', params], // Ключ кеша - при изменении params запрос перевыполнится
    queryFn: () => apiClient.getProducts(params), // Функция для загрузки данных
    enabled: true, // Запрос активен всегда (выполняется автоматически)
    // Дополнительные настройки кеширования берутся из QueryProvider:
    // - staleTime: 5 минут
    // - gcTime: 10 минут  
    // - retry: 3 попытки
    // - refetchOnWindowFocus: false
  });
};

/**
 * Хук для получения детальной информации о конкретном продукте.
 * 
 * Функционал:
 * - Кеширование по ID продукта
 * - Условное выполнение запроса (только если ID передан)
 * - Автоматическая типизация возвращаемых данных
 * - Интеграция с общей системой кеширования
 * 
 * Query Key: ['product', id] - уникальный ключ кеша для каждого продукта
 * 
 * @param id - UUID идентификатор продукта
 * @returns объект с data, isLoading, error и другими состояниями запроса
 * 
 * @example
 * const { data: product, isLoading } = useProduct('123e4567-e89b-12d3-a456-426614174000');
 */
export const useProduct = (id: string) => {
  return useQuery({
    queryKey: ['product', id], // Уникальный ключ кеша для каждого продукта
    queryFn: () => apiClient.getProduct(id), // Функция для загрузки продукта по ID
    enabled: !!id, // Запрос выполняется только если ID определен (не пустая строка)
    // Это предотвращает ненужные запросы при монтировании компонента
    // до получения ID из роутера или пропсов
  });
};